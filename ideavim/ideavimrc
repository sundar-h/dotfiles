""" IdeaVim: track action Ids
""" 点击IDE 显示对应的操作名称id

""" Map leader to space ---------------------
let mapleader=" "
let maplocalleader="\\"

""" Plugins  --------------------------------
" ys, cs, ds,  S
set surround
set multiple-cursors
" gcc, gc + motion, v_gc
set commentary
" argument text objects: aa, ia
set argtextobj
set easymotion
" entire buffer text object: ae
set textobj-entire
set ReplaceWithRegister
" cx{motion} to select, again to exchange
set exchange
" Trying the new syntax
Plug 'machakann/vim-highlightedyank'
""" 需要JetBrains IDE 中安装 which-key 插件
set which-key
set virtualedit=onemore
set NERDTree
set highlightedyank
set vim-paragraph-motion
set textobj-indent
set vim-indent-object


""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>"

" <C-n> seems to me as a better solution than <M-n>,
" but we should finally support vim-visual-multi because vim-multiple-cursors is deprecated now
map <C-n> <Plug>NextWholeOccurrence

""" Common settings -------------------------
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set showmode
set so=5
" Do incremental searching.
set incsearch
set nu
set scrolloff=5

""" which-key plugin settings -------------------------
""" set notimeout """ which-key 配置
""" make the popup show up 'instantly'
""" let g:WhichKey_DefaultDelay = 0

" Don't use Ex mode, use Q for formatting.
map Q gq


""" Idea specific settings ------------------
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep

""" Mappings --------------------------------
map <leader>f <Plug>(easymotion-s)
map <leader>e <Plug>(easymotion-f)

map <leader>d <Action>(Debug)
map <leader>r <Action>(RenameElement)
map <leader>c <Action>(Stop)
map <leader>z <Action>(ToggleDistractionFreeMode)

map <leader>s <Action>(SelectInProjectView)
map <leader>a <Action>(Annotate)
map <leader>h <Action>(Vcs.ShowTabbedFileHistory)
map <S-Space> <Action>(GotoNextError)

map <leader>b <Action>(ToggleLineBreakpoint)
map <leader>o <Action>(FileStructurePopup)

" Toggle case and start typing. E.g. `<leader>iget`: `property` -> `getProperty`
map <leader>i ~hi
" Remove selection and toggle case. E.g. `v2l<leader>u`: `getProperty` -> `property`
vmap <leader>u d~h

map U <C-R>

""" Strict mode for development ---------------
set ideastrictmode

nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>
" VimPluginToggle
""" Keep visual selection
vnoremap < <gv
vnoremap > >gv

""" Navigate methods
map [[ <Action>(MethodUp)
map ]] <Action>(MethodDown)

""" Collapse different regions
map zc <Action>(CollapseRegion)
map zo <Action>(ExpandRegion)
map <leader>zc <Action>(CollapseAllRegions)
map <leader>zo <Action>(ExpandAllRegions)

" 常用
map <leader>r <Action>(Refactorings.QuickListPopupAction)
map <leader>= <Action>(ReformatCode)
map <leader>o <Action>(OptimizeImports)

nnoremap <c-/> :action FindInPath<CR>
" nnoremap <c-c> :action GotoClass<CR>
nnoremap <c-f> :action GotoFile<CR>
nnoremap <c-o> :action GotoSymbol<CR>

" 常用
map ge <Action>(GotoNextError)
map gE <Action>(GotoPreviousError)
nnoremap gi :action GotoImplementation<CR>
nnoremap gd :action GotoDeclaration<CR>
nnoremap gp :action GotoSuperMethod<CR>
nnoremap gt :action GotoTypeDeclaration<CR>
" TODO:
nnoremap g, :action Back<CR>
nnoremap g. :action Forward<CR>

nnoremap <leader>u :action FindUsages<CR>
nnoremap <leader>h :action CallHierarchy<CR>
nnoremap <c-s> :action FileStructurePopup<CR>

map H ^

""" IdeaVim development stuff
set ideastrictmode

" Find more examples here: https://jb.gg/share-ideavimrc
